=begin
#API Reference

#Review our [API Introduction](../api-introduction) to get started.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
=end

module TurnkeyClient
  class UserVerificationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Init generic OTP
    # Initiate a generic OTP activity.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ActivityResponse]
    def init_otp(body, opts = {})
      data, _status_code, _headers = init_otp_with_http_info(body, opts)
      data
    end

    # Init generic OTP
    # Initiate a generic OTP activity.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActivityResponse, Integer, Hash)>] ActivityResponse data, response status code and response headers
    def init_otp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserVerificationApi.init_otp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserVerificationApi.init_otp"
      end
      # resource path
      local_var_path = '/public/v1/submit/init_otp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ActivityResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth', 'AuthenticatorAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserVerificationApi#init_otp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Verify generic OTP
    # Verify a generic OTP.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [ActivityResponse]
    def verify_otp(body, opts = {})
      data, _status_code, _headers = verify_otp_with_http_info(body, opts)
      data
    end

    # Verify generic OTP
    # Verify a generic OTP.
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ActivityResponse, Integer, Hash)>] ActivityResponse data, response status code and response headers
    def verify_otp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: UserVerificationApi.verify_otp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling UserVerificationApi.verify_otp"
      end
      # resource path
      local_var_path = '/public/v1/submit/verify_otp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'ActivityResponse' 

      auth_names = opts[:auth_names] || ['ApiKeyAuth', 'AuthenticatorAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: UserVerificationApi#verify_otp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
