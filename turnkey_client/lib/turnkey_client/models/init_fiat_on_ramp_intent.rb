=begin
#API Reference

#Review our [API Introduction](../api-introduction) to get started.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
=end

require 'date'

module TurnkeyClient
  class InitFiatOnRampIntent
    attr_accessor :onramp_provider

    # Destination wallet address for the buy transaction.
    attr_accessor :wallet_address

    attr_accessor :network

    attr_accessor :crypto_currency_code

    attr_accessor :fiat_currency_code

    # Specifies a preset fiat amount for the transaction, e.g., '100'. Must be greater than '20'. If not provided, the user will be prompted to enter an amount.
    attr_accessor :fiat_currency_amount

    attr_accessor :payment_method

    # ISO 3166-1 two-digit country code for Coinbase representing the purchasing user’s country of residence, e.g., US, GB.
    attr_accessor :country_code

    # ISO 3166-2 two-digit country subdivision code for Coinbase representing the purchasing user’s subdivision of residence within their country, e.g. NY. Required if country_code=US.
    attr_accessor :country_subdivision_code

    # Optional flag to indicate whether to use the sandbox mode to simulate transactions for the on-ramp provider. Default is false.
    attr_accessor :sandbox_mode

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'onramp_provider' => :'onrampProvider',
        :'wallet_address' => :'walletAddress',
        :'network' => :'network',
        :'crypto_currency_code' => :'cryptoCurrencyCode',
        :'fiat_currency_code' => :'fiatCurrencyCode',
        :'fiat_currency_amount' => :'fiatCurrencyAmount',
        :'payment_method' => :'paymentMethod',
        :'country_code' => :'countryCode',
        :'country_subdivision_code' => :'countrySubdivisionCode',
        :'sandbox_mode' => :'sandboxMode'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'onramp_provider' => :'Object',
        :'wallet_address' => :'Object',
        :'network' => :'Object',
        :'crypto_currency_code' => :'Object',
        :'fiat_currency_code' => :'Object',
        :'fiat_currency_amount' => :'Object',
        :'payment_method' => :'Object',
        :'country_code' => :'Object',
        :'country_subdivision_code' => :'Object',
        :'sandbox_mode' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'fiat_currency_amount',
        :'country_code',
        :'country_subdivision_code',
        :'sandbox_mode'
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TurnkeyClient::InitFiatOnRampIntent` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TurnkeyClient::InitFiatOnRampIntent`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'onramp_provider')
        self.onramp_provider = attributes[:'onramp_provider']
      end

      if attributes.key?(:'wallet_address')
        self.wallet_address = attributes[:'wallet_address']
      end

      if attributes.key?(:'network')
        self.network = attributes[:'network']
      end

      if attributes.key?(:'crypto_currency_code')
        self.crypto_currency_code = attributes[:'crypto_currency_code']
      end

      if attributes.key?(:'fiat_currency_code')
        self.fiat_currency_code = attributes[:'fiat_currency_code']
      end

      if attributes.key?(:'fiat_currency_amount')
        self.fiat_currency_amount = attributes[:'fiat_currency_amount']
      end

      if attributes.key?(:'payment_method')
        self.payment_method = attributes[:'payment_method']
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.key?(:'country_subdivision_code')
        self.country_subdivision_code = attributes[:'country_subdivision_code']
      end

      if attributes.key?(:'sandbox_mode')
        self.sandbox_mode = attributes[:'sandbox_mode']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @onramp_provider.nil?
        invalid_properties.push('invalid value for "onramp_provider", onramp_provider cannot be nil.')
      end

      if @wallet_address.nil?
        invalid_properties.push('invalid value for "wallet_address", wallet_address cannot be nil.')
      end

      if @network.nil?
        invalid_properties.push('invalid value for "network", network cannot be nil.')
      end

      if @crypto_currency_code.nil?
        invalid_properties.push('invalid value for "crypto_currency_code", crypto_currency_code cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @onramp_provider.nil?
      return false if @wallet_address.nil?
      return false if @network.nil?
      return false if @crypto_currency_code.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          onramp_provider == o.onramp_provider &&
          wallet_address == o.wallet_address &&
          network == o.network &&
          crypto_currency_code == o.crypto_currency_code &&
          fiat_currency_code == o.fiat_currency_code &&
          fiat_currency_amount == o.fiat_currency_amount &&
          payment_method == o.payment_method &&
          country_code == o.country_code &&
          country_subdivision_code == o.country_subdivision_code &&
          sandbox_mode == o.sandbox_mode
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [onramp_provider, wallet_address, network, crypto_currency_code, fiat_currency_code, fiat_currency_amount, payment_method, country_code, country_subdivision_code, sandbox_mode].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TurnkeyClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
