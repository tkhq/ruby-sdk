=begin
#API Reference

#Review our [API Introduction](../api-introduction) to get started.

OpenAPI spec version: 1.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
=end

require 'date'

module TurnkeyClient
  class CreateSubOrganizationIntentV5
    # Name for this sub-organization
    attr_accessor :sub_organization_name

    # Root users to create within this sub-organization
    attr_accessor :root_users

    # The threshold of unique approvals to reach root quorum. This value must be less than or equal to the number of root users
    attr_accessor :root_quorum_threshold

    attr_accessor :wallet

    # Disable email recovery for the sub-organization
    attr_accessor :disable_email_recovery

    # Disable email auth for the sub-organization
    attr_accessor :disable_email_auth

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sub_organization_name' => :'subOrganizationName',
        :'root_users' => :'rootUsers',
        :'root_quorum_threshold' => :'rootQuorumThreshold',
        :'wallet' => :'wallet',
        :'disable_email_recovery' => :'disableEmailRecovery',
        :'disable_email_auth' => :'disableEmailAuth'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sub_organization_name' => :'Object',
        :'root_users' => :'Object',
        :'root_quorum_threshold' => :'Object',
        :'wallet' => :'Object',
        :'disable_email_recovery' => :'Object',
        :'disable_email_auth' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'disable_email_recovery',
        :'disable_email_auth'
      ])
    end
  
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TurnkeyClient::CreateSubOrganizationIntentV5` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TurnkeyClient::CreateSubOrganizationIntentV5`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sub_organization_name')
        self.sub_organization_name = attributes[:'sub_organization_name']
      end

      if attributes.key?(:'root_users')
        if (value = attributes[:'root_users']).is_a?(Array)
          self.root_users = value
        end
      end

      if attributes.key?(:'root_quorum_threshold')
        self.root_quorum_threshold = attributes[:'root_quorum_threshold']
      end

      if attributes.key?(:'wallet')
        self.wallet = attributes[:'wallet']
      end

      if attributes.key?(:'disable_email_recovery')
        self.disable_email_recovery = attributes[:'disable_email_recovery']
      end

      if attributes.key?(:'disable_email_auth')
        self.disable_email_auth = attributes[:'disable_email_auth']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @sub_organization_name.nil?
        invalid_properties.push('invalid value for "sub_organization_name", sub_organization_name cannot be nil.')
      end

      if @root_users.nil?
        invalid_properties.push('invalid value for "root_users", root_users cannot be nil.')
      end

      if @root_quorum_threshold.nil?
        invalid_properties.push('invalid value for "root_quorum_threshold", root_quorum_threshold cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @sub_organization_name.nil?
      return false if @root_users.nil?
      return false if @root_quorum_threshold.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sub_organization_name == o.sub_organization_name &&
          root_users == o.root_users &&
          root_quorum_threshold == o.root_quorum_threshold &&
          wallet == o.wallet &&
          disable_email_recovery == o.disable_email_recovery &&
          disable_email_auth == o.disable_email_auth
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sub_organization_name, root_users, root_quorum_threshold, wallet, disable_email_recovery, disable_email_auth].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        elsif attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TurnkeyClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end  end
end
